name: CI

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        platform: ["ubuntu-22.04", "macos-12", "windows-2022"]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: |
            3.12
            3.11
            3.10
      - name: Discover python
        run: |
          echo "PYTHONS=$(python .github/workflows/pydiscovery.py --min-version 3.10 --delimiter ' ' --root-dir ${{ runner.tool_cache }}/Python)" >> "$GITHUB_ENV"
      - name: Cache Rust target directory
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}
          path: |
            ~/.cargo  
            target
      - name: Run test
        if: startsWith(matrix.platform, 'ubuntu')
        run: cargo test --no-default-features --features pyo3/auto-initialize
      - uses: messense/maturin-action@v1
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.14
        with:
          command: build
          args: --release ${{ startsWith(matrix.platform, 'ubuntu') && startsWith(matrix.python, '3.10') && '--sdist' || '' }} -o dist -i python ${{ startsWith(matrix.platform, 'macos') && '--target universal2-apple-darwin' || '' }}
      - name: Run test
        if: "!startsWith(matrix.platform, 'windows')"
        run: |
          mv kgdata kgdata2  
          python -c "import subprocess, glob, os; file = glob.glob(os.path.join('dist', '*cp310*.whl'))[0]; subprocess.check_output(['pip', 'install', file + '[spark]'])"
          pip install pytest
          pytest -xs tests/
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}
          path: dist

  build-manylinux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Rust target directory
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-manylinux
          path: target
      - name: Build wheels
        run: |
          docker run --rm -w /project -v $(pwd):/project \
            -e EXTRA_PATH=/opt/python/cp310-cp310/bin \
            -e PYTHON_HOMES=/opt/python \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=false \
            quay.io/pypa/manylinux2014_x86_64:latest \
            bash /project/.github/workflows/build.sh -t x86_64-unknown-linux-gnu
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-manylinux
          path: dist

  release-crate:
    name: Release Crates.io
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/dev-ci')
    needs: [build, build-manylinux]
    steps:
      - uses: actions/checkout@v3
      - name: Publish to Crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
        run: |
          cargo publish --dry-run
          cargo publish --no-verify || echo 'crate is already published'

  release-pypi:
    name: Release PyPI.org
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/dev-ci')
    needs: [build, build-manylinux]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels-manylinux
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-22.04
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-macos-12
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-windows-2022
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-manylinux
          path: dist
      - name: release
        run: |
          pip install twine
          twine upload --skip-existing dist/* -u $PYPI_USER -p $PYPI_PWD
        env:
          PYPI_USER: __token__
          PYPI_PWD: ${{ secrets.PYPI_TOKEN }}
