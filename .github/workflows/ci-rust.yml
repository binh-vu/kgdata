name: CI Rust

on:
  push:
    paths:
      - "rust/**"
  pull_request:
    paths:
      - "rust/**"

jobs:
  build:
    strategy:
      matrix:
        platform: ["ubuntu-22.04", "macos-15", "windows-2022"]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: |
            3.14
            3.13
            3.12
            3.11
            3.10
      - name: Discover python
        run: |
          pip install wherepy
          echo "PYTHONS=$(python -m wherepy --minimum-version 3.10 --delimiter ' ' --return-execpath --search-dir ${{ runner.tool_cache }}/Python)" >> "$GITHUB_ENV"
      - name: Cache Rust target directory
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}
          path: |
            ~/.cargo  
            rust/target
      - name: Run test
        if: ${{ startsWith(matrix.platform, 'ubuntu') }}
        run: |
          cd rust
          cargo test --no-default-features --features pyo3/auto-initialize
      - uses: messense/maturin-action@v1
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.14"
        with:
          command: build
          working-directory: rust
          args: >
            -o dist -i ${{ env.PYTHONS }}
            --release ${{ startsWith(matrix.platform, 'ubuntu') && '--sdist' || '' }}
            ${{ startsWith(matrix.platform, 'macos') && '--target universal2-apple-darwin' || '' }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}
          path: rust/dist

  build-manylinux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Rust target directory
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-manylinux
          path: rust/target
      - name: Build wheels
        run: |
          docker run --rm -w /project/rust -v $(pwd):/project \
            -e EXTRA_PATH=/opt/python/cp310-cp310/bin \
            -e PYTHON_ROOT_DIR=/opt/python \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=false \
            quay.io/pypa/manylinux_2_34_x86_64:latest \
            bash /project/.github/workflows/build.sh -t x86_64-unknown-linux-gnu
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-manylinux-x86_64
          path: rust/dist
  build-manylinux-aarch64:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v3
      - name: Cache Rust target directory
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-manylinux
          path: rust/target
      - name: Build wheels
        run: |
          docker run --rm -w /project/rust -v $(pwd):/project \
            -e EXTRA_PATH=/opt/python/cp310-cp310/bin \
            -e PYTHON_ROOT_DIR=/opt/python \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=false \
            quay.io/pypa/manylinux_2_34_aarch64:latest \
            bash /project/.github/workflows/build.sh -t aarch64-unknown-linux-gnu
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-manylinux-aarch64
          path: rust/dist

  release-crate:
    name: Release Crates.io
    runs-on: ubuntu-22.04
    # if: ${{ startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/dev-ci') }}
    needs: [build, build-manylinux-x86_64, build-manylinux-aarch64]
    steps:
      - uses: actions/checkout@v3
      - name: Publish to Crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
        run: |
          cd rust
          cargo publish --dry-run
          cargo publish --no-verify || echo 'crate is already published'

  release-pypi:
    name: Release PyPI.org
    runs-on: ubuntu-22.04
    # if: ${{ startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/dev-ci') }}
    needs: [build, build-manylinux-x86_64, build-manylinux-aarch64]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels-manylinux-x86_64
          path: rust/dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-manylinux-aarch64
          path: rust/dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-22.04
          path: rust/dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-macos-15
          path: rust/dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-windows-2022
          path: rust/dist
      - name: release
        run: |
          cd rust
          pip install twine
          twine upload --skip-existing dist/* -u $PYPI_USER -p $PYPI_PWD
        env:
          PYPI_USER: __token__
          PYPI_PWD: ${{ secrets.PYPI_TOKEN }}
