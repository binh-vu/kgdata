from __future__ import annotations

from typing import Generic, TypeVar

K = TypeVar("K")
V = TypeVar("V")

class RustVecView(Generic[V]):
    def __iter__(self) -> RustVecIterView[V]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> V: ...

class RustVecIterView(Generic[V]):
    def __iter__(self) -> RustVecIterView[V]: ...
    def __next__(self) -> V: ...

class RustSetView(Generic[V]):
    def __iter__(self) -> RustSetIterView[V]: ...
    def __len__(self) -> int: ...
    def __contains__(self, value: V) -> bool: ...

class RustSetIterView(Generic[V]):
    def __iter__(self) -> RustSetIterView[V]: ...
    def __next__(self) -> V: ...

class RustMapView(Generic[K, V]):
    def keys(self) -> RustMapKeysView[K, V]: ...
    def values(self) -> RustMapValuesView[K, V]: ...
    def items(self) -> RustMapItemsView[K, V]: ...
    def __iter__(self) -> RustMapKeysView[K, V]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: K) -> V: ...

class RustMapKeysView(Generic[K, V]):
    def __iter__(self) -> RustMapKeysView[K, V]: ...
    def __next__(self) -> K: ...

class RustMapValuesView(Generic[K, V]):
    def __iter__(self) -> RustMapValuesView[K, V]: ...
    def __next__(self) -> K: ...

class RustMapItemsView(Generic[K, V]):
    def __iter__(self) -> RustMapItemsView[K, V]: ...
    def __next__(self) -> tuple[K, V]: ...
